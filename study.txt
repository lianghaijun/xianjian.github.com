DOS仙剑研究室

1. 脚本在 sss.mkf 文件中, 解压后, 为5个文件
2. sss.mkf 的解压
	2.1  SSS#0  相关物体信息表



研究课题:

1109: mkf
1108: tile
rle
1110:YJ_1
1112-1113: xy		坐标系统,对话系统, fon32点阵,脚本系统
1114: uint8array
1115: whole map
1116: bytearray
1117: anim,             主角, npc动画, ui刷新周期


1119: 触发, 脚本, 多个脚本同时执行
1120: DEBUG 右侧, 加入, 增加调试相关
1121: 第三个场景的情况, 主要是18个动画一块显示
1122: 性能优化, 加入了performance
1123: 调整了坐标算法, 改成了3个canvas, 
1124: 新增了启动页面
1125: touch, 脚本时不允许左右键
1126: 重新改写了层级算法, 完美处理, 但需优化, (采用排序)
1127: 优化分层算法, 减少运算量, 只有当角色变化时, 再渲染遮挡
1128: 自动脚本问题

1201: (见下面的写的几句)
1203: (周末两天主要是写UI, 解包了data.mkf)
1204: (找了一个下午的, item的描述, 结果发现, dos版是没有描述的),  晚上用数组接了UI
1205: 主要将UI整理出来了, 分成drawBox, drawLine, drawTable, draw等UI形式, 自适应文本大小
1206: 主要写了UI, ESC为主, 及item , 及item脚本的引入, 并形成了一个版本
1207: 改了两个点:  a) 行动不越过Npc,    b) 动画时, 不能移动走路
1208: talkMessage, talkTips, 区分了对话中的颜色



TODO: (优先级)
1. 改进层级系统, 使用层, 解决层问题, 只渲染遮挡
2. 自动脚本改为定时执行, 每次定时执行, 看是否有定时脚本, 直接定时脚本, 结束(state = 0)
3. 解决速度问题
4. ESC
5. 战斗  (对战, 法术)
6. 对话中的很多特殊符号
7. 




心得:

1. 使用2048x2048地图, 离屏渲染, 确实能提高很多的速度, iphone走路时不再卡了
2. 解决资源加载的速度问题
	2.1 延迟加载的, 如gop, 可以在切换场景时, 等待加载, 加载完成后, 再切换
3. 设计接口的时候, 需要考虑异步问题




/////////////////////////////////////////////////////////////////////////

接口

---------

资源文件, 统一返回Resource包装, 支持同步, 异步资源等...
1. 资源加载接口, resource    loadXXX(x, y, callback),  增加callback, 则为异步
2. 启动对话前, 需要保证, 对话资源到位...
3. 启动场景前, 需要保证, 场景资源到位...
4. 启动某功能前, 等待资源载入吧....
5. 去掉资源的异步支持, 
6. 在启动画面, 切换场景, 第一次ESC, 第一次战斗前, 等待, 特定资源的载入
7. 特定的情况下, 可能会根据内存情况, 释放一些资源, 比如Gop等, 检测还是需要的
8. 资源的优化, 可以之后再做, 确定好接口就可以了
9. 仍然采用 load 同步返回 image 的形式
10.如需保存数据, 可以根据情况保存在 image 的canvas对象里

----------

分层

1. 遮盖问题
2. 









1.2
优化点: 

1. 对话时
	1.1 对话前, 需要将NPC面对主角, 然后再说话
	








//////////////////////////////////////////////

1128:

---底层, 数据处理, 比较成熟

util-hex   显示16进制, 刚开始调试解压缩, 及mkf, rle时使用
util-view  用于数据的处理
util-deyj  yj_1 解压缩算法
util-canvas 只有一个字节生成 canvas对象的方法

resource.js  资源文件, 用于返回数据, 如图片, 文字, 对话, 等资源


注意: 变色, 采用darker来处理, 使用, 全部同一颜色的图, 进行darker
所以: 文字, 只会缓存白色的




////////////////////////////////////////

1129:

等待脚本的问题

1. 使用ui循环驱动
2. 当进行场景脚本时, 触发脚本时, 不允许再执行自动脚本, 除非在等待时间
3. 现在假设所有的对话都是在场景脚本, 自动脚本, 物品脚本中
4. 所有的ui脚本, 都看成是当前脚本的子脚本
5. 先假设只有两层子脚本

所以, 首先必须构造一个成熟的脚本, 子脚本系统

Script.next	执行下一个脚本, 返回SubScript, 表示子脚本, , 如果返回WAIT, 表示等待
Script.sub	执行一个子脚本, 每一秒调用一次, 返回true, 表示, 结束子脚本
Script.



另外一套方法:

使用 register/callback 的方式, 避免每次从脚本上部开始遍历
每个脚本注册时, 都对应的一个callback, 用于执行完毕后, 执行callback




//////////////////////////////////////////////////////////////////

1130:

跟踪后, 发现:

1. 脚本执行时, 是不进行UI动画的,
2. 执行UI动画时, 是并行执行的
3. 所有的脚本都是即时执行的, 只有没有脚本执行的时候, 才执行UI循环
4. 当有对话UI时, 暂停所有的







1130:

1. 修改动画实现形式


1201:

1. 思考分层架构体系
2. 分层如下几层
	2.1 通用工具层(游戏无关), 如: 十六进制转换, ajax请求, input(keypress,touch,mouse统一支持)
	2.2 通用工具层(游戏相关), 如: deyj压缩, rle解压, canvas, 等通用功能
	2.3 通用工具层(tool类), 如: 调试工具, 性能监测工具
	2.4 游戏底层(资源),   如: 获取资源数据, resource, 
	2.5 游戏底层(数据),   如: 获取图片, 获取脚本, 获取动画, 获取视频, (统一接口)
	2.6 游戏中层(引擎),   如: anim, script, uiloop, map/tile, role, 
	2.7 游戏高层(API),    如: 所有的command实现
	2.8 游戏最终集成,     如: 调用游戏API生成的, 各类游戏


1208:  0x8100 003F 0001 9789

